{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport errorIcon from '../error.svg';\n\nlet userSelectedDate;\nconst startBtn = document.querySelector('button[data-start]');\nconst input = document.querySelector('#datetime-picker')\nconst span = document.querySelectorAll('.value');\nstartBtn.setAttribute('disabled', '');   \n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n      const presentTime = Date.now();\n        const selectedTime = selectedDates[0].getTime();\n    \n        if (selectedTime <= presentTime) {\n          iziToast.error({\n             backgroundColor: 'red',\n            iconUrl: errorIcon,\n            theme: 'dark',\n            overlay: true,\n            position: 'topCenter',\n            title: 'Error',\n            titleColor: 'white',\n            message: \"Please choose a date in the future\",\n            messageColor: 'white',\n            overlayColor: 'rgba(0, 0, 0, 0.6)',\n            });\n            startBtn.setAttribute('disabled', '');\n            return;\n        } \n\n         startBtn.removeAttribute('disabled');\n        userSelectedDate = selectedTime;\n        console.log(selectedDates[0]);\n    }, \n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n  }\n\n  function addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\nlet intervalId;\n\nfunction startTimer() {\nconst timer = userSelectedDate - Date.now();\n  [...span].map((item, index) => item.textContent = addLeadingZero(Object.values(convertMs(timer))[index]));  \n  if (timer <= 1000) {\n    clearInterval(intervalId);\n  input.removeAttribute('disabled', '');\n  }\n}\nstartBtn.addEventListener('click', () => {\n    intervalId = setInterval(startTimer, 1000);\n  startBtn.setAttribute('disabled', '');\n    input.setAttribute('disabled', '');\n});\n\n\nflatpickr('input[type=\"text\"]', options)\n\n\n"],"names":["userSelectedDate","startBtn","input","span","options","selectedDates","presentTime","selectedTime","iziToast","errorIcon","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","intervalId","startTimer","timer","item","index","flatpickr"],"mappings":"sGAMA,IAAIA,EACJ,MAAMC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAO,SAAS,iBAAiB,QAAQ,EAC/CF,EAAS,aAAa,WAAY,EAAE,EAEpC,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACrB,MAAMC,EAAc,KAAK,MACjBC,EAAeF,EAAc,CAAC,EAAE,QAAO,EAE7C,GAAIE,GAAgBD,EAAa,CAC/BE,EAAS,MAAM,CACZ,gBAAiB,MAClB,QAASC,EACT,MAAO,OACP,QAAS,GACT,SAAU,YACV,MAAO,QACP,WAAY,QACZ,QAAS,qCACT,aAAc,QACd,aAAc,oBAC1B,CAAa,EACDR,EAAS,aAAa,WAAY,EAAE,EACpC,MACH,CAEAA,EAAS,gBAAgB,UAAU,EACpCD,EAAmBO,EACnB,QAAQ,IAAIF,EAAc,CAAC,CAAC,CAC/B,CACL,EAEA,SAASK,EAAUC,EAAI,CAKrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACrC,CAED,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,IAAIC,EAEJ,SAASC,GAAa,CACtB,MAAMC,EAAQpB,EAAmB,KAAK,MACpC,CAAC,GAAGG,CAAI,EAAE,IAAI,CAACkB,EAAMC,IAAUD,EAAK,YAAcL,EAAe,OAAO,OAAON,EAAUU,CAAK,CAAC,EAAEE,CAAK,CAAC,CAAC,EACpGF,GAAS,MACX,cAAcF,CAAU,EAC1BhB,EAAM,gBAAgB,WAAY,EAAE,EAEtC,CACAD,EAAS,iBAAiB,QAAS,IAAM,CACrCiB,EAAa,YAAYC,EAAY,GAAI,EAC3ClB,EAAS,aAAa,WAAY,EAAE,EAClCC,EAAM,aAAa,WAAY,EAAE,CACrC,CAAC,EAGDqB,EAAU,qBAAsBnB,CAAO"}